#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram –±–æ—Ç–∞ ReloCompass
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Django ORM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ MVP
"""

import asyncio
import logging
import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    env_path = Path(__file__).parent / '.env'
    load_dotenv(env_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
except ImportError:
    print("‚ö†Ô∏è python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")

from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
    sys.exit(1)

logger.info(f"‚úÖ BOT_TOKEN –∑–∞–≥—Ä—É–∂–µ–Ω: {BOT_TOKEN[:10]}...")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_stage = State()
    waiting_for_family = State()
    waiting_for_budget = State()
    waiting_for_region = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", callback_data="catalog")],
        [InlineKeyboardButton(text="üõÇ –í–∏–∑–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data="visa")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])
    return keyboard

def get_stage_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–¥–∏–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§î –ü–ª–∞–Ω–∏—Ä—É—é –ø–µ—Ä–µ–µ–∑–¥", callback_data="stage_planning")],
        [InlineKeyboardButton(text="üîç –ò—â—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", callback_data="stage_searching")],
        [InlineKeyboardButton(text="üí∞ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ", callback_data="stage_ready")]
    ])
    return keyboard

def get_family_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ–º—å–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –û–¥–∏–Ω", callback_data="family_1")],
        [InlineKeyboardButton(text="üë• 2-3 —á–µ–ª–æ–≤–µ–∫–∞", callback_data="family_2_3")],
        [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ 4+ —á–µ–ª–æ–≤–µ–∫–∞", callback_data="family_4_plus")]
    ])
    return keyboard

def get_budget_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –î–æ $100K", callback_data="budget_100k")],
        [InlineKeyboardButton(text="üí∞ $100K - $300K", callback_data="budget_300k")],
        [InlineKeyboardButton(text="üíé $300K+", callback_data="budget_300k_plus")]
    ])
    return keyboard

def get_region_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üèùÔ∏è –ü—Ö—É–∫–µ—Ç", callback_data="region_phuket")],
        [InlineKeyboardButton(text="üå¥ –ë–∞–ª–∏", callback_data="region_bali")],
        [InlineKeyboardButton(text="üèîÔ∏è –ì—Ä—É–∑–∏—è", callback_data="region_georgia")],
        [InlineKeyboardButton(text="üèõÔ∏è –¢—É—Ä—Ü–∏—è", callback_data="region_turkey")],
        [InlineKeyboardButton(text="üèñÔ∏è –ö–∏–ø—Ä", callback_data="region_cyprus")]
    ])
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ReloCompass!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_stage_keyboard()
    )
    await state.set_state(UserStates.waiting_for_stage)

async def handle_stage_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–¥–∏–∏"""
    stage = callback.data.replace("stage_", "")
    await state.update_data(stage=stage)
    
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–æ—Å—Ç–∞–≤–µ —Å–µ–º—å–∏:",
        reply_markup=get_family_keyboard()
    )
    await state.set_state(UserStates.waiting_for_family)

async def handle_family_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Å–µ–º—å–∏"""
    family = callback.data.replace("family_", "")
    await state.update_data(family=family)
    
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:",
        reply_markup=get_budget_keyboard()
    )
    await state.set_state(UserStates.waiting_for_budget)

async def handle_budget_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞"""
    budget = callback.data.replace("budget_", "")
    await state.update_data(budget=budget)
    
    await callback.message.edit_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=get_region_keyboard()
    )
    await state.set_state(UserStates.waiting_for_region)

async def handle_region_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    region = callback.data.replace("region_", "")
    await state.update_data(region=region)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    user_data = await state.get_data()
    
    await callback.message.edit_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:\n\n"
        f"üìã –°—Ç–∞–¥–∏—è: {user_data.get('stage', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üë• –°–µ–º—å—è: {user_data.get('family', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {user_data.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üåç –†–µ–≥–∏–æ–Ω: {user_data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞!",
        reply_markup=get_main_menu()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logger.info(f"User {callback.from_user.id} completed onboarding: {user_data}")

async def handle_catalog(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    await callback.message.edit_text(
        "üè† –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:\n"
        "1. RED Experts (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)\n"
        "2. –ë—É—Å—Ç-–æ–±—ä–µ–∫—Ç—ã\n"
        "3. –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

async def handle_visa(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–∑–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    await callback.message.edit_text(
        "üõÇ –í–∏–∑–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç 3-–≤–æ–ø—Ä–æ—Å–Ω—ã–π –∫–≤–∏–∑ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–∏–ø–∞ –≤–∏–∑—ã.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

async def handle_stats(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.message.edit_text(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ª–∏–¥–æ–≤.\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

async def handle_help(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏"""
    await callback.message.edit_text(
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "ü§ñ ReloCompass - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏–¥–æ–≤ –≤ —Å—Ñ–µ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
        "üì± –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

async def handle_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
        reply_markup=get_main_menu()
    )

async def handle_unknown(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback'–æ–≤"""
    await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(start_command, Command("start"))
    dp.callback_query.register(handle_stage_selection, lambda c: c.data.startswith("stage_"))
    dp.callback_query.register(handle_family_selection, lambda c: c.data.startswith("family_"))
    dp.callback_query.register(handle_budget_selection, lambda c: c.data.startswith("budget_"))
    dp.callback_query.register(handle_region_selection, lambda c: c.data.startswith("region_"))
    dp.callback_query.register(handle_catalog, lambda c: c.data == "catalog")
    dp.callback_query.register(handle_visa, lambda c: c.data == "visa")
    dp.callback_query.register(handle_stats, lambda c: c.data == "stats")
    dp.callback_query.register(handle_help, lambda c: c.data == "help")
    dp.callback_query.register(handle_menu, lambda c: c.data == "menu")
    dp.callback_query.register(handle_unknown)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
