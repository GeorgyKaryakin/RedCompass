#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ ReloCompass MVP
–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ Django –∞–¥–º–∏–Ω–∫—É –±–µ–∑ Docker
"""

import os
import sys
import subprocess
import time
import signal
from pathlib import Path

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    print("""
üè† ReloCompass - –ó–∞–ø—É—Å–∫ MVP
==================================================
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ Docker
""")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    try:
        import pip
        print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
                      check=True, capture_output=True)
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def setup_django():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        subprocess.run([sys.executable, "manage.py", "makemigrations"], 
                      check=True, capture_output=True)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        subprocess.run([sys.executable, "manage.py", "migrate"], 
                      check=True, capture_output=True)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Django...")
        print("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
        
        try:
            subprocess.run([sys.executable, "manage.py", "createsuperuser", "--noinput"], 
                          check=True, capture_output=True)
            print("‚úÖ –°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
        except subprocess.CalledProcessError:
            print("‚ÑπÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django: {e}")
        return False

def start_services():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django —Å–µ—Ä–≤–µ—Ä
        print("üåê –ó–∞–ø—É—Å–∫ Django –∞–¥–º–∏–Ω–∫–∏...")
        django_process = subprocess.Popen([
            sys.executable, "manage.py", "runserver", "8000"
        ])
        processes.append(("Django", django_process))
        print("‚úÖ Django –∞–¥–º–∏–Ω–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ http://localhost:8000")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Django
        time.sleep(3)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        bot_process = subprocess.Popen([
            sys.executable, "bot/main.py"
        ])
        processes.append(("Bot", bot_process))
        print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("üì± Telegram –±–æ—Ç: –∞–∫—Ç–∏–≤–µ–Ω")
        print("üåê Django –∞–¥–º–∏–Ω–∫–∞: http://localhost:8000/admin")
        print("\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        while True:
            time.sleep(1)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            for name, process in processes:
                if process.poll() is not None:
                    print(f"‚ùå {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
                    return False
        
    except KeyboardInterrupt:
        print("\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for name, process in processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        print("üëã –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Django
    if not setup_django():
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    return start_services()

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
